// Generated by CoffeeScript 1.3.3
(function() {
  var Main, log,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  log = function(x) {
    return console.log(x);
  };

  Main = (function(_super) {

    __extends(Main, _super);

    function Main() {
      return Main.__super__.constructor.apply(this, arguments);
    }

    Main.prototype.data = [];

    Main.prototype.headers = [];

    Main.prototype.initialize = function() {
      this.setupViews();
      return this.fetchData();
    };

    Main.prototype.setupViews = function() {
      var chart, hours, num, output, output_body, output_head;
      chart = $('#chart');
      output = $('table#output');
      output_head = output.find("thead tr");
      output_body = output.find("tbody tr");
      hours = (function() {
        var _i, _results;
        _results = [];
        for (num = _i = 1; _i <= 24; num = ++_i) {
          _results.push(num);
        }
        return _results;
      })();
      return _.each(hours, function(hour) {
        return chart.append(ich.bar_graph_item({
          hour: hour
        }));
      });
    };

    Main.prototype.fetchData = function() {
      var _this = this;
      return $.get('data/shark-attacks-pipe-delimited.txt', function(data) {
        return _this.parseData(data);
      });
    };

    Main.prototype.parseData = function(data) {
      var headers, lines,
        _this = this;
      lines = data.split(/\n/);
      headers = _.first(lines).split('|');
      lines = _.rest(lines);
      _.each(lines, function(line) {
        var cells, row;
        row = {};
        cells = line.split('|');
        _.each(cells, function(cell, x) {
          if ((x != null) && x < cells.length) {
            return row[headers[x]] = cells[x];
          }
        });
        return _this.data.push(row);
      });
      return this.postProcess(this.data);
    };

    Main.prototype.sanitizeText = function(text) {
      return text;
    };

    Main.prototype.postProcess = function() {
      var data, h, hours, max, num, vis, w, x, y;
      hours = (function() {
        var _i, _results;
        _results = [];
        for (num = _i = 1; _i <= 24; num = ++_i) {
          _results.push(num);
        }
        return _results;
      })();
      _.each(times, function(time) {
        var hour, min;
        if ((time.indexOf('h' === 2)) && (time.length === 5)) {
          hour = time.substr(0, 2);
          return min = time.substr(3);
        }
      });
      data = [3, 7, 9, 1, 4, 6, 8, 2, 5];
      w = 700;
      h = 300;
      max = d3.max(data);
      x = d3.scale.linear().domain([0, data.length - 1]).range([0, w]);
      y = d3.scale.linear().domain([0, max]).range([h, 0]);
      vis = d3.select('#d3').append('svg:svg').attr('width', w).attr('height', h);
      return vis.selectAll('path.line').data([data]).enter().append("svg:path").attr("d", d3.svg.line().x(function(d, i) {
        return x(i);
      }).y(y));
    };

    return Main;

  })(Backbone.View);

  $(function() {
    var main;
    return main = new Main;
  });

}).call(this);
